{"version":3,"sources":["serviceWorker.js","card.js","cardlist.js","robots.js","SearchBox.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","props","className","alt","src","id","name","email","Cardlist","robots","cardComponent","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","App","onSearchChange","event","setState","target","value","state","filteredRobots","this","filter","toLowerCase","includes","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sCCGWC,EAlBJ,SAACC,GACT,OACC,yBAAKC,UAAU,oDAEX,yBAAMC,IAAI,SAASC,IAAG,+BAA0BH,EAAMI,GAAhC,cAEnB,6BACG,4BAAKJ,EAAMK,MACX,2BAAIL,EAAMM,UCmBXC,EA3BA,SAAC,GAAY,IAAXC,EAAU,EAAVA,OAEXC,EAAcD,EAAOE,KAAI,SAACC,EAAKC,GACpC,OACE,kBAAC,EAAD,CAAMC,IAAKD,EAAGR,GAAII,EAAOI,GAAGR,GAAGC,KAAMG,EAAOI,GAAGP,KAAKC,MAAOE,EAAOI,GAAGN,WAOnE,OAEL,6BACGG,ICjBUD,EAAO,CACnB,CACCJ,GAAG,EACJC,KAAK,WACLC,MAAM,sBAGP,CACCF,GAAI,EACJC,KAAK,gBACLC,MAAM,2BAGP,CACCF,GAAI,EACJC,KAAK,mBACLC,MAAM,8BAGP,CACCF,GAAI,EACJC,KAAK,WACLC,MAAM,qBAGP,CACCF,GAAI,EACJC,KAAK,QACLC,MAAM,mBAGP,CACCF,GAAI,EACJC,KAAK,gBACLC,MAAM,0BAGP,CACCF,GAAI,EACJC,KAAK,UACLC,MAAM,oBAGP,CACCF,GAAI,EACJC,KAAK,cACLC,MAAM,yBAGP,CACCF,GAAI,EACJC,KAAK,gBACLC,MAAM,2BAGP,CACCF,GAAI,GACJC,KAAK,QACLC,MAAM,oBCxCQQ,EAhBC,SAAC,GAA8B,EAA5BC,YAA6B,IAAjBC,EAAgB,EAAhBA,aAC9B,OAEC,yBAAKf,UAAU,OAEP,2BAAOgB,KAAK,SACZhB,UAAU,mCACViB,YAAY,gBACZC,SAAUH,MC2BLI,G,wDA9Bd,aAAc,IAAD,8BACZ,gBAQDC,eAAe,SAACC,GACf,EAAKC,SAAS,CAACR,YAAYO,EAAME,OAAOC,SARxC,EAAKC,MAAM,CACVlB,OAAOA,EACAO,YAAY,IAJR,E,qDAcJ,IAAD,OACDY,EAAeC,KAAKF,MAAMlB,OAAOqB,QAAO,SAAArB,GAC7C,OAAOA,EAAOH,KAAKyB,cAAcC,SAAS,EAAKL,MAAMX,YAAYe,kBAGlE,OACA,yBAAK7B,UAAU,MACf,wBAAIA,UAAU,MAAd,gBACA,kBAAC,EAAD,CAAWe,aAAcY,KAAKP,iBAC9B,kBAAC,EAAD,CAAUb,OAASmB,S,GAxBHK,cCGlBC,IAASC,OACR,kBAAC,EAAD,MACAC,SAASC,eAAe,SNwHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.a3203a88.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\n \n\n const Card =(props) => {\n     return(\n     \t<div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n          \n          <img  alt='robots' src={`https://robohash.org/${props.id}?200x200`}/>\n          \n             <div>\n                <h2>{props.name}</h2>\n                <p>{props.email}</p>\n              </div>\n          </div>\n\n         \n\t\t);\n\n\n\t }\n\n\t export default Card;","import React from 'react';\n\nimport Card from './card';\nconst Cardlist=({robots})=>{\n\nconst cardComponent=robots.map((user,i)=>{\n\treturn(\n\t\t <Card key={i} id={robots[i].id}name={robots[i].name}email={robots[i].email}/>\n\n\n\t\t)\n})\n\n\n     return(\n\n<div>\n  {cardComponent}\n\n</div>\n\n\n\n\n  );\n\n\n\n\n}\nexport default Cardlist;\n","export const robots=[\n\t{\n\t\tid:1,\n\tname:'Jane Doe',\n\temail:'Jane.Doe@gmail.com',\n   },\n\n{\n\tid :2,\n\tname:'lucillia rose',\n\temail:'lucillia.rose@gmail.com',\n\n},\n{\n\tid :3,\n\tname:'Timothy Chabalgu',\n\temail:'Timothy.Chabalgu@gmail.com',\n\n},\n{\n\tid :4,\n\tname:'Camilla ',\n\temail:'Camilla@gmail.com',\n\n},\n{\n\tid :5,\n\tname:'Karen',\n\temail:'Karen@gmail.com',\n\n},\n{\n\tid :6,\n\tname:'crystal Rose ',\n\temail:'Crystal.Rose@gmail.com',\n\n},\n{\n\tid :7,\n\tname:' Oliver',\n\temail:'Oliver@gmail.com',\n\n},\n{\n\tid :8,\n\tname:'james Peach',\n\temail:'James.Peach@gmail.com',\n\n},\n{\n\tid :9,\n\tname:'Agustus Gloop',\n\temail:'Agustus.Gloop@gmail.com',\n\n},\n{\n\tid :10,\n\tname:'fezco',\n\temail:'fezco@gmail.com',\n\n}\n]\nexport default robots;\n\n\n","import React from'react';\n\nconst SearchBox=({ searchfield,searchChange})=>{\n\treturn(\n\n\t\t<div className='pa2'>\n\t\t\n          <input type='search' \n          className='pa3 ba b--green bg-lightest-blue'\n          placeholder='search robots'\n          onChange={searchChange}\n          />\n          </div>\n\n\n\t\t)\n}\n\nexport default SearchBox","import React,{Component} from 'react'\nimport Cardlist from './cardlist';\nimport {robots} from './robots';\nimport SearchBox from './SearchBox';\nimport './App.css'\n\nclass App extends Component {\n\tconstructor(){\n\t\tsuper()\n\t\tthis.state={\n\t\t\trobots:robots,\n\t         searchfield:''\n\n\t\t}\n\t}\n\n\tonSearchChange=(event) =>{\n\t\tthis.setState({searchfield:event.target.value})\n\t\t\n\t\t\n\t}\n\trender(){\n\t\tconst filteredRobots=this.state.robots.filter(robots=>{\n\t\t\treturn robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\n\t\t})\n\n\t\treturn (\n\t\t<div className='tc' >\n\t\t<h1 className='f2'>Robotfriends</h1>\n\t\t<SearchBox searchChange={this.onSearchChange}/>\n\t\t<Cardlist robots ={filteredRobots}/>\n\t\t</div>\n\t\t);\n\t}\n\t\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './App';\nimport {robots} from './robots';\n\nReactDOM.render(\n\t<App/>,\n\tdocument.getElementById('root')\n\t);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}